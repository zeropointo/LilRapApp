// Mocks generated by Mockito 5.0.15 from annotations
// in lil_rap_app/test/features/artist_list/domain/usecases/get_concrete_rapper_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:lil_rap_app/core/error/failures.dart' as _i5;
import 'package:lil_rap_app/features/artist_list/domain/entities/rapper.dart'
    as _i6;
import 'package:lil_rap_app/features/artist_list/domain/repositories/rapper_repo.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [RapperRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockRapperRepo extends _i1.Mock implements _i3.RapperRepo {
  MockRapperRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.Rapper>>>
      getConcreteRapperList() =>
          (super.noSuchMethod(Invocation.method(#getConcreteRapperList, []),
                  returnValue:
                      Future<_i2.Either<_i5.Failure, List<_i6.Rapper>>>.value(
                          _FakeEither_0<_i5.Failure, List<_i6.Rapper>>()))
              as _i4.Future<_i2.Either<_i5.Failure, List<_i6.Rapper>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Rapper>> getConcreteRapper(
          String? id) =>
      (super.noSuchMethod(Invocation.method(#getConcreteRapper, [id]),
              returnValue: Future<_i2.Either<_i5.Failure, _i6.Rapper>>.value(
                  _FakeEither_0<_i5.Failure, _i6.Rapper>()))
          as _i4.Future<_i2.Either<_i5.Failure, _i6.Rapper>>);
  @override
  String toString() => super.toString();
}
